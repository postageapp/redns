#!/usr/bin/env ruby

require 'set'

$LOAD_PATH << File.expand_path(File.join('..','lib'), File.dirname(__FILE__))

require 'optparse'

require 'eventmachine'
require 'redns'

# == Main ===================================================================

options = {
  protocol: :udp,
  query_type: :any,
  nameservers: [ ]
}

op = OptionParser.new do |op|
  op.on('-p', '--proto=s', 'Use protocol (UDP or TCP)') do |s|
    options[:protocol] = s.downcase.to_sym
  end

  op.on('-t', '--type=s') do |type|
    options[:query_type] = type.to_sym
  end
end

# Look for command-line arguments prefixed with '@' and push these into the
# options for nameservers.
queries = op.parse(*ARGV).select do |query|
  case (query.upcase)
  when 'TXT','MX','SOA','ANY','A','AAAA','CNAME','PTR'
    options[:query_type] = query.downcase.to_sym
    false
  when /^@(.*)/
    options[:nameservers] << $1
    false
  else
    true
  end
end

if (queries.empty?)
  $stderr.puts('No queries')
  exit(0)
end

EventMachine.run do
  resolver = ReDNS::Connection.instance(options[:protocol]) do |c|
    if (options[:nameservers].any?)
      c.nameservers = options[:nameservers]
    end

    c.timeout = 2
  end

  pending = Set.new(queries)

  queries.each do |query|
    resolver.resolve(query, options[:query_type]) do |results|
      if (results)
        puts '%s: %d result(s) found' % [ query, results.length ]
        results.each do |result|
          puts result.to_s
        end
      else
        puts 'No results'
      end

      pending.delete(query)

      if (pending.empty?)
        EventMachine.stop_event_loop
      end
    end
  end
end
